
uartInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000608  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080007cc  080007cc  000107cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007e0  080007e0  000107e8  2**0
                  CONTENTS
  4 .ARM          00000000  080007e0  080007e0  000107e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e0  080007e8  000107e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e0  080007e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007e4  080007e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  080007e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080007e8  00020038  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000107e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c4a  00000000  00000000  00010812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000512  00000000  00000000  0001145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00011970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00011ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011a9  00000000  00000000  00011ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001746  00000000  00000000  00012d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003fdd  00000000  00000000  00014497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00018474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000364  00000000  00000000  000184c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007b4 	.word	0x080007b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080007b4 	.word	0x080007b4

08000204 <HardFault_Handler>:

#include "int.h"
#include "main.h"

void HardFault_Handler()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// Check the call stack
	// Check exception faults

	// Error loop

	while(1);
 8000208:	e7fe      	b.n	8000208 <HardFault_Handler+0x4>

0800020a <SysTick_Handler>:

}

void SysTick_Handler(void)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0

	SysTick_CallBack();
 800020e:	f000 f857 	bl	80002c0 <SysTick_CallBack>

}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	Uart_IRQHandler(&huart2);
 800021c:	4802      	ldr	r0, [pc, #8]	; (8000228 <USART2_IRQHandler+0x10>)
 800021e:	f000 f9db 	bl	80005d8 <Uart_IRQHandler>

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	2000001c 	.word	0x2000001c

0800022c <main>:

uint8_t dataReceived = 0;


int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

	huart2.uart_Istance = UART_2;
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <main+0x84>)
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <main+0x88>)
 8000236:	601a      	str	r2, [r3, #0]

	uint32_t delayTimeStamp = Get_SystemTimeMs();
 8000238:	f000 f8e0 	bl	80003fc <Get_SystemTimeMs>
 800023c:	60f8      	str	r0, [r7, #12]

	char *dataBuffTx = "Write something:\n\r";
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0x8c>)
 8000240:	60bb      	str	r3, [r7, #8]

	// System configurations
	System_Config();
 8000242:	f000 f85f 	bl	8000304 <System_Config>

	// Uart configuration
	uart_Init_It(&huart2);
 8000246:	481a      	ldr	r0, [pc, #104]	; (80002b0 <main+0x84>)
 8000248:	f000 f918 	bl	800047c <uart_Init_It>

	while(1)
	{

		if(Compare_SystemTimeMs(delayTimeStamp) > 5000)
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f000 f8df 	bl	8000410 <Compare_SystemTimeMs>
 8000252:	4603      	mov	r3, r0
 8000254:	f241 3288 	movw	r2, #5000	; 0x1388
 8000258:	4293      	cmp	r3, r2
 800025a:	d9f7      	bls.n	800024c <main+0x20>
		{

			// Write something

			uart_Start_Tx_It(&huart2, (uint8_t *)dataBuffTx, 18);
 800025c:	2212      	movs	r2, #18
 800025e:	68b9      	ldr	r1, [r7, #8]
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <main+0x84>)
 8000262:	f000 f969 	bl	8000538 <uart_Start_Tx_It>

			// Wait a response

			uint8_t c = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	71fb      	strb	r3, [r7, #7]
			do
			{

				// Read byte by byte what the user write

				uart_Start_Rx_It(&huart2, &c, 1);
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	2201      	movs	r2, #1
 800026e:	4619      	mov	r1, r3
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <main+0x84>)
 8000272:	f000 f98d 	bl	8000590 <uart_Start_Rx_It>

				// Wait data received

				while(!dataReceived);
 8000276:	bf00      	nop
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x90>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0fb      	beq.n	8000278 <main+0x4c>

				dataReceived = 0;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0x90>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]

				// Echo byte by byte back

				uart_Start_Tx_It(&huart2, &c, 1);
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	2201      	movs	r2, #1
 800028a:	4619      	mov	r1, r3
 800028c:	4808      	ldr	r0, [pc, #32]	; (80002b0 <main+0x84>)
 800028e:	f000 f953 	bl	8000538 <uart_Start_Tx_It>

				// Increment index

			}while(c != '\r'); // Check for the end
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b0d      	cmp	r3, #13
 8000296:	d1e8      	bne.n	800026a <main+0x3e>


			// Send a new line character

			uart_SingleByte_Tx(&huart2, '\n');
 8000298:	210a      	movs	r1, #10
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <main+0x84>)
 800029c:	f000 f8d6 	bl	800044c <uart_SingleByte_Tx>
			uart_SingleByte_Tx(&huart2, '\r');
 80002a0:	210d      	movs	r1, #13
 80002a2:	4803      	ldr	r0, [pc, #12]	; (80002b0 <main+0x84>)
 80002a4:	f000 f8d2 	bl	800044c <uart_SingleByte_Tx>

			// Wait 5 seconds

			delayTimeStamp = Get_SystemTimeMs();
 80002a8:	f000 f8a8 	bl	80003fc <Get_SystemTimeMs>
 80002ac:	60f8      	str	r0, [r7, #12]
		if(Compare_SystemTimeMs(delayTimeStamp) > 5000)
 80002ae:	e7cd      	b.n	800024c <main+0x20>
 80002b0:	2000001c 	.word	0x2000001c
 80002b4:	40004400 	.word	0x40004400
 80002b8:	080007cc 	.word	0x080007cc
 80002bc:	20000030 	.word	0x20000030

080002c0 <SysTick_CallBack>:
}



void SysTick_CallBack(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

	SysTickCountMs++;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <SysTick_CallBack+0x18>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <SysTick_CallBack+0x18>)
 80002cc:	6013      	str	r3, [r2, #0]

}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000034 	.word	0x20000034

080002dc <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(uartHandler_t *huart, uint8_t event)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	460b      	mov	r3, r1
 80002e6:	70fb      	strb	r3, [r7, #3]

	if(event == USART_EVENT_RX_CMPLT)
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d102      	bne.n	80002f4 <USART_ApplicationEventCallback+0x18>
	{

		// Reception complete

		dataReceived = 1;
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <USART_ApplicationEventCallback+0x24>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]

	}

}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000030 	.word	0x20000030

08000304 <System_Config>:
 * processor peripherals configuration;
 * port configurations;
 *
*/
void System_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

	systemClock_Init();
 8000308:	f000 f872 	bl	80003f0 <systemClock_Init>

	SysTick_Init();
 800030c:	f000 f804 	bl	8000318 <SysTick_Init>

	port_Init();
 8000310:	f000 f828 	bl	8000364 <port_Init>

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}

08000318 <SysTick_Init>:


void SysTick_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0

	uint32_t *pSysTickCSR  = (uint32_t *)0xE000E010U;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <SysTick_Init+0x44>)
 8000320:	60fb      	str	r3, [r7, #12]

	// [2] internal clock source ; [1] enable SysTick exception ; [0] enable counter

	*pSysTickCSR |= (7 << 0);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f043 0207 	orr.w	r2, r3, #7
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]

	// Reload value
	// 1ms

	uint32_t reload = 16000 - 1; // 16Mhz [system clock] * 1ms [Systick exception]
 800032e:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000332:	60bb      	str	r3, [r7, #8]

	uint32_t *pSysTickRVR = (uint32_t *)0xE000E014U;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <SysTick_Init+0x48>)
 8000336:	607b      	str	r3, [r7, #4]

	*pSysTickRVR &= ~(0x00FFFFFF); // Clear
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	601a      	str	r2, [r3, #0]
	*pSysTickRVR |= (reload); // Set
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]

}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010
 8000360:	e000e014 	.word	0xe000e014

08000364 <port_Init>:


void port_Init(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b087      	sub	sp, #28
 8000368:	af00      	add	r7, sp, #0
	// PIN_2 -> USART_2 TX
	// PIN_3 -> USART_2 RX

	// Enable clock GPIOA

	uint32_t *RCCBaseAddr = (uint32_t *)0x40023800U;
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <port_Init+0x84>)
 800036c:	617b      	str	r3, [r7, #20]

	uint32_t *pRCCAHB1ENR = (uint32_t *)( (uint32_t)RCCBaseAddr + (uint32_t)0x30U );
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3330      	adds	r3, #48	; 0x30
 8000372:	613b      	str	r3, [r7, #16]

	*pRCCAHB1ENR |= (1 << 0);
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 0201 	orr.w	r2, r3, #1
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	601a      	str	r2, [r3, #0]


	uint32_t *pGPIOABaseAddr = (uint32_t *)0x40020000U;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <port_Init+0x88>)
 8000382:	60fb      	str	r3, [r7, #12]

	// PIN_2 configuration

	// MODER

	uint32_t *pGPIOMODER = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x00U );
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	60bb      	str	r3, [r7, #8]

	*pGPIOMODER |= ( 0x2 << (2 * 2) ); // GPIOA_2 alternate mode
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f043 0220 	orr.w	r2, r3, #32
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	601a      	str	r2, [r3, #0]

	// OSPEED

	uint32_t *pGPIOOSPEED = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x08U );
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	3308      	adds	r3, #8
 8000398:	607b      	str	r3, [r7, #4]

	*pGPIOOSPEED |= ( 0x3 << ( 2 * 2 ) ); // GPIOA_2 ospeed
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]

	// AFRL

	uint32_t *pGPIOAFRL = (uint32_t *)( (uint32_t)pGPIOABaseAddr + (uint32_t)0x20U );
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3320      	adds	r3, #32
 80003aa:	603b      	str	r3, [r7, #0]

	*pGPIOAFRL |= ( 0x7 << (2 * 4) ); // GPIOA_2 AF7 -> USART_2 TX
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	601a      	str	r2, [r3, #0]

	// PIN_3 configuration

	// MODER

	*pGPIOMODER |= ( 0x2 << (3 * 2) ); // GPIOA_3 alternate mode
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	601a      	str	r2, [r3, #0]

	// OSPEED

	*pGPIOOSPEED |= ( 0x3 << ( 3 * 2 ) ); // GPIOA_3 ospeed
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]

	// AFRL

	*pGPIOAFRL |= ( 0x7 << (3 * 4) ); // GPIOA_3 AF7 -> USART_2 RX
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	601a      	str	r2, [r3, #0]

}
 80003dc:	bf00      	nop
 80003de:	371c      	adds	r7, #28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000

080003f0 <systemClock_Init>:


void systemClock_Init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	uint32_t *pRCCCFGR = (uint32_t *)( (uint32_t)pRCCBaseAddr + (uint32_t)0x08U );

	*pRCCCFGR |= ( 0x02 << 2 );
	*/

}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <Get_SystemTimeMs>:
*
* Get SysTicCount
*
*/
uint32_t Get_SystemTimeMs(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

	return SysTickCountMs;
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <Get_SystemTimeMs+0x10>)
 8000402:	681b      	ldr	r3, [r3, #0]

}
 8000404:	4618      	mov	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	20000034 	.word	0x20000034

08000410 <Compare_SystemTimeMs>:
*
* Compare captured value with actual
*
*/
uint32_t Compare_SystemTimeMs(uint32_t capturedTimeMs)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]

	uint32_t ret = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]

	if(SysTickCountMs >= capturedTimeMs)
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <Compare_SystemTimeMs+0x38>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	429a      	cmp	r2, r3
 8000424:	d805      	bhi.n	8000432 <Compare_SystemTimeMs+0x22>
		ret = SysTickCountMs - capturedTimeMs;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <Compare_SystemTimeMs+0x38>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	e004      	b.n	800043c <Compare_SystemTimeMs+0x2c>
	else
		ret = capturedTimeMs - SysTickCountMs;
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <Compare_SystemTimeMs+0x38>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	60fb      	str	r3, [r7, #12]

	return ret;
 800043c:	68fb      	ldr	r3, [r7, #12]

}
 800043e:	4618      	mov	r0, r3
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000034 	.word	0x20000034

0800044c <uart_SingleByte_Tx>:
		uart_SingleByte_Tx(huart, dataBuff[i]);

}

void uart_SingleByte_Tx(uartHandler_t *huart, uint8_t data)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]

	// Write the data into the data register

	huart->uart_Istance->uart_dr  = data;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	78fa      	ldrb	r2, [r7, #3]
 800045e:	605a      	str	r2, [r3, #4]

	// Wait until the transmission completes

	while( ! ( huart->uart_Istance->uart_sr & ( 1 << 6  ) ) ); // TC == 1
 8000460:	bf00      	nop
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f8      	beq.n	8000462 <uart_SingleByte_Tx+0x16>

}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <uart_Init_It>:


/********************************************** Interrupt communication mode **********************************************/

void uart_Init_It(uartHandler_t *huart)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

	// 16 MHz

	// Enable clock for UART2

	uint32_t *pRccBaseAddr = (uint32_t *)0x40023800U;
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <uart_Init_It+0xb0>)
 8000486:	61fb      	str	r3, [r7, #28]

	uint32_t *pRccAPB1 = (uint32_t *)( (uint32_t)pRccBaseAddr + 0x40U );
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	3340      	adds	r3, #64	; 0x40
 800048c:	61bb      	str	r3, [r7, #24]

	*pRccAPB1 |= ( 1 << 17 );
 800048e:	69bb      	ldr	r3, [r7, #24]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	601a      	str	r2, [r3, #0]
	// USARTDIV = fck / ( 16 * 9600 ) = 104.16
	// DIV_FRACTION = 16 * 0.16 = 3 = 0x3
	// DIV_MANTISSA = 104 = 0x68
	// USART_BRR = 0x683

	huart->uart_Istance->uart_brr = 0x683U; // 9600 baud rate
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f240 6283 	movw	r2, #1667	; 0x683
 80004a2:	609a      	str	r2, [r3, #8]

	/* Control register configuration CR1 */

	// word length

	huart->uart_Istance->uart_cr1 &= ~( 1 << 12 ); // 8 bits of data
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80004b2:	60da      	str	r2, [r3, #12]

	// uart enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 13 ); // uart enabled
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80004c2:	60da      	str	r2, [r3, #12]

	// receiver enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 2 ); // RE
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	68da      	ldr	r2, [r3, #12]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f042 0204 	orr.w	r2, r2, #4
 80004d2:	60da      	str	r2, [r3, #12]

	// transmission enable

	huart->uart_Istance->uart_cr1 |= ( 1 << 3 ); // TE
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68da      	ldr	r2, [r3, #12]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f042 0208 	orr.w	r2, r2, #8
 80004e2:	60da      	str	r2, [r3, #12]

	/* Control register configuration CR2 */

	// stop bits

	huart->uart_Istance->uart_cr2 &= ~( 0x3 << 12 );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	691a      	ldr	r2, [r3, #16]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80004f2:	611a      	str	r2, [r3, #16]

	// Enable interrupt for UART2

	// UART2_IRQ -> 38

	uint32_t *pNvicIserBaseAddr  = (uint32_t *)0xE000E100U;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <uart_Init_It+0xb4>)
 80004f6:	617b      	str	r3, [r7, #20]
	uint32_t *pNvicIser1 = (uint32_t *)( (uint32_t)pNvicIserBaseAddr + (uint32_t)0x04U );
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3304      	adds	r3, #4
 80004fc:	613b      	str	r3, [r7, #16]

	*pNvicIser1 |= ( 1 << 6 ); // Enable interrupt for UART2
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	601a      	str	r2, [r3, #0]

	// Set the interrupt priority for UART2

	uint32_t *pNvicIprBaseAddr = (uint32_t *)0xE000E400U;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <uart_Init_It+0xb8>)
 800050c:	60fb      	str	r3, [r7, #12]
	uint32_t *pNvicIpr9 = (uint32_t *)( (uint32_t)pNvicIprBaseAddr + (uint32_t)0x20U );
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3320      	adds	r3, #32
 8000512:	60bb      	str	r3, [r7, #8]

	*pNvicIpr9 |= ( 0x3 << ( ( 8 * 2 ) + 4 )); // Priority set to 3
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	601a      	str	r2, [r3, #0]

}
 8000520:	bf00      	nop
 8000522:	3724      	adds	r7, #36	; 0x24
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000e400 	.word	0xe000e400

08000538 <uart_Start_Tx_It>:


void uart_Start_Tx_It(uartHandler_t *huart, uint8_t *dataBuff, uint8_t length)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]

	if(huart->uart_TxState != UART_BUSY_IN_TX)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	7c9b      	ldrb	r3, [r3, #18]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d01b      	beq.n	8000586 <uart_Start_Tx_It+0x4e>
	{

		huart->uart_TxState = UART_BUSY_IN_TX;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2201      	movs	r2, #1
 8000552:	749a      	strb	r2, [r3, #18]
		huart->uart_dataBuffTx = dataBuff;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	605a      	str	r2, [r3, #4]
		huart->uart_IndexTx = 0;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2200      	movs	r2, #0
 800055e:	721a      	strb	r2, [r3, #8]
		huart->uart_ContTx = length;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	79fa      	ldrb	r2, [r7, #7]
 8000564:	725a      	strb	r2, [r3, #9]

		// TC interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 6 ); // TCIE
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000574:	60da      	str	r2, [r3, #12]

		// TXE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 7 ); // TXEIE
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000584:	60da      	str	r2, [r3, #12]

	}

}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <uart_Start_Rx_It>:

void uart_Start_Rx_It(uartHandler_t *huart, uint8_t *dataBuff, uint8_t length)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4613      	mov	r3, r2
 800059c:	71fb      	strb	r3, [r7, #7]

	if(huart->uart_RxState != UART_BUSY_IN_RX)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	7cdb      	ldrb	r3, [r3, #19]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d013      	beq.n	80005ce <uart_Start_Rx_It+0x3e>
	{

		huart->uart_RxState = UART_BUSY_IN_RX;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2202      	movs	r2, #2
 80005aa:	74da      	strb	r2, [r3, #19]
		huart->uart_dataBuffRx = dataBuff;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	60da      	str	r2, [r3, #12]
		huart->uart_IndexRx = 0;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2200      	movs	r2, #0
 80005b6:	741a      	strb	r2, [r3, #16]
		huart->uart_ContRx = length;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	745a      	strb	r2, [r3, #17]

		// RXNE interrupt enable

		huart->uart_Istance->uart_cr1 |= ( 1 << 5 ); // RXNEIE
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 0220 	orr.w	r2, r2, #32
 80005cc:	60da      	str	r2, [r3, #12]

	}

}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <Uart_IRQHandler>:

void Uart_IRQHandler(uartHandler_t *huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint32_t temp1;


	/*************************Check for TC flag ********************************************/

	temp1 = ( huart->uart_Istance->uart_sr & ( 1 << 6 ) );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	60fb      	str	r3, [r7, #12]

	if(temp1)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d021      	beq.n	8000636 <Uart_IRQHandler+0x5e>
	{

		// Interrupt due to TC flag

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7c9b      	ldrb	r3, [r3, #18]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d11d      	bne.n	8000636 <Uart_IRQHandler+0x5e>
		{

			if(huart->uart_ContTx == 0)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a5b      	ldrb	r3, [r3, #9]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d119      	bne.n	8000636 <Uart_IRQHandler+0x5e>
			{

				// Close the transmission

				// Clear the TC flag (otherwise it remains 1)
				huart->uart_Istance->uart_sr &= ~( 1 << 6 );
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000610:	601a      	str	r2, [r3, #0]

				//Reset the application state
				huart->uart_TxState = UART_READY;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	749a      	strb	r2, [r3, #18]

				//Reset Buffer address to NULL
				//huart->uart_dataBuffTx = NULL;

				//Reset the length to zero
				huart->uart_ContTx = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	725a      	strb	r2, [r3, #9]

				//Implement the code to clear the TCIE bit (disable interrupt for TC flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 6 );
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800062c:	60da      	str	r2, [r3, #12]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(huart, USART_EVENT_TX_CMPLT);
 800062e:	2100      	movs	r1, #0
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff fe53 	bl	80002dc <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = huart->uart_Istance->uart_sr & ( 1 << 7 );
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000640:	60fb      	str	r3, [r7, #12]

	if(temp1)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d028      	beq.n	800069a <Uart_IRQHandler+0xc2>
	{

		//this interrupt is because of TXE

		if(huart->uart_TxState == UART_BUSY_IN_TX)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7c9b      	ldrb	r3, [r3, #18]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d124      	bne.n	800069a <Uart_IRQHandler+0xc2>
		{
			//Keep sending data until Txlen reaches to zero
			if(huart->uart_ContTx > 0)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7a5b      	ldrb	r3, [r3, #9]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d014      	beq.n	8000682 <Uart_IRQHandler+0xaa>
			{

					//This is 8bit data transfer
					huart->uart_Istance->uart_dr = ( huart->uart_dataBuffTx[huart->uart_IndexTx] );
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	7a12      	ldrb	r2, [r2, #8]
 8000660:	4413      	add	r3, r2
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					huart->uart_IndexTx++;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	3301      	adds	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	721a      	strb	r2, [r3, #8]
					huart->uart_ContTx -= 1;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7a5b      	ldrb	r3, [r3, #9]
 800067a:	3b01      	subs	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	725a      	strb	r2, [r3, #9]

			}

			if (huart->uart_ContTx == 0 )
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7a5b      	ldrb	r3, [r3, #9]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <Uart_IRQHandler+0xc2>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				huart->uart_Istance->uart_cr1 &= ~( 1 << 7 );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000698:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = huart->uart_Istance->uart_sr & ( 1 << 5 );
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	60fb      	str	r3, [r7, #12]

	if(temp1)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d030      	beq.n	800070e <Uart_IRQHandler+0x136>
	{

		//this interrupt is because of rxne

		if(huart->uart_RxState == UART_BUSY_IN_RX)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7cdb      	ldrb	r3, [r3, #19]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d12c      	bne.n	800070e <Uart_IRQHandler+0x136>
		{
			if(huart->uart_ContRx > 0)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7c5b      	ldrb	r3, [r3, #17]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d015      	beq.n	80006e8 <Uart_IRQHandler+0x110>
			{

				//We are going to receive 8bit data in a frame

				//read 8 bits from DR
				huart->uart_dataBuffRx[huart->uart_IndexRx] = (uint8_t)( huart->uart_Istance->uart_dr );
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6859      	ldr	r1, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7c12      	ldrb	r2, [r2, #16]
 80006ca:	4413      	add	r3, r2
 80006cc:	b2ca      	uxtb	r2, r1
 80006ce:	701a      	strb	r2, [r3, #0]

				//Now , increment the pRxBuffer
				huart->uart_IndexRx++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7c1b      	ldrb	r3, [r3, #16]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	741a      	strb	r2, [r3, #16]
				huart->uart_ContRx -= 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7c5b      	ldrb	r3, [r3, #17]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	745a      	strb	r2, [r3, #17]

			}

			if(!huart->uart_ContRx )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7c5b      	ldrb	r3, [r3, #17]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <Uart_IRQHandler+0x136>
			{
				//disable the rxne
				huart->uart_Istance->uart_cr1 &= ~( 1 << 5 );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68da      	ldr	r2, [r3, #12]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f022 0220 	bic.w	r2, r2, #32
 80006fe:	60da      	str	r2, [r3, #12]
				huart->uart_RxState = UART_READY;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	74da      	strb	r2, [r3, #19]
				USART_ApplicationEventCallback(huart, USART_EVENT_RX_CMPLT);
 8000706:	2101      	movs	r1, #1
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fde7 	bl	80002dc <USART_ApplicationEventCallback>
			}
		}
	}

}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f000 f811 	bl	800076c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fd6f 	bl	800022c <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800075c:	080007e8 	.word	0x080007e8
  ldr r2, =_sbss
 8000760:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000764:	20000038 	.word	0x20000038

08000768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC_IRQHandler>
	...

0800076c <__libc_init_array>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4d0d      	ldr	r5, [pc, #52]	; (80007a4 <__libc_init_array+0x38>)
 8000770:	4c0d      	ldr	r4, [pc, #52]	; (80007a8 <__libc_init_array+0x3c>)
 8000772:	1b64      	subs	r4, r4, r5
 8000774:	10a4      	asrs	r4, r4, #2
 8000776:	2600      	movs	r6, #0
 8000778:	42a6      	cmp	r6, r4
 800077a:	d109      	bne.n	8000790 <__libc_init_array+0x24>
 800077c:	4d0b      	ldr	r5, [pc, #44]	; (80007ac <__libc_init_array+0x40>)
 800077e:	4c0c      	ldr	r4, [pc, #48]	; (80007b0 <__libc_init_array+0x44>)
 8000780:	f000 f818 	bl	80007b4 <_init>
 8000784:	1b64      	subs	r4, r4, r5
 8000786:	10a4      	asrs	r4, r4, #2
 8000788:	2600      	movs	r6, #0
 800078a:	42a6      	cmp	r6, r4
 800078c:	d105      	bne.n	800079a <__libc_init_array+0x2e>
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f855 3b04 	ldr.w	r3, [r5], #4
 8000794:	4798      	blx	r3
 8000796:	3601      	adds	r6, #1
 8000798:	e7ee      	b.n	8000778 <__libc_init_array+0xc>
 800079a:	f855 3b04 	ldr.w	r3, [r5], #4
 800079e:	4798      	blx	r3
 80007a0:	3601      	adds	r6, #1
 80007a2:	e7f2      	b.n	800078a <__libc_init_array+0x1e>
 80007a4:	080007e0 	.word	0x080007e0
 80007a8:	080007e0 	.word	0x080007e0
 80007ac:	080007e0 	.word	0x080007e0
 80007b0:	080007e4 	.word	0x080007e4

080007b4 <_init>:
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	bf00      	nop
 80007b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ba:	bc08      	pop	{r3}
 80007bc:	469e      	mov	lr, r3
 80007be:	4770      	bx	lr

080007c0 <_fini>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr
